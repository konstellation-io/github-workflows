name: Docker build workflow 

on:
  workflow_call:
    inputs:
      component:
        required: true
        type: string
      component_path:
        required: true
        type: string
    secrets:
      github_token:
        required: true
      docker_username:
        required: true
      docker_token:
        required: true

jobs:
  create-release-tag:
    if: github.ref == 'refs/heads/main' # only in main branch
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.release_tag.outputs.tag }}
    steps:
      - name: CheckOut
        uses: actions/checkout@v2

      - name: Generate a release tag
        uses: intelygenz/monorepo-tagger-action@v1.0-rc.1
        id: release_tag
        with:
          mode: 'component'
          type: 'final'
          component-prefix: "${{ inputs.component }}-"
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

  create-fix-tag:
    if: startsWith(github.ref, 'refs/heads/release') # only in release branches
    runs-on: ubuntu-20.04
    outputs:
       tag: ${{ steps.fix_tag.outputs.tag }}
    steps:
      - name: CheckOut
        uses: actions/checkout@v2

      - uses: chrisdickinson/setup-yq@latest
      - name: Get component versions
        id: component_version
        run: |
          TAG=`yq r metaapp/values.yaml '${{ inputs.component }}World.tag'`
          echo ::set-output name=TAG::${TAG}
          echo Component version in release branch is ${TAG}

      - name: Generate a fix
        uses: intelygenz/monorepo-tagger-action@v1.0-rc.1
        id: fix_tag
        with:
          mode: 'component'
          type: 'fix'
          component-prefix: "${{ inputs.component }}-"
          current-version: ${{ steps.component_version.outputs.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

  build-release:
    if: |
      always() &
      (needs.create-release-tag.outputs.tag || needs.create-fix-tag.outputs.tag)
    needs: [create-release-tag, create-fix-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_token }}

      - name: Store fix tag
        run: echo Tag set to ${{needs.create-release-tag.outputs.tag}}${{needs.create-fix-tag.outputs.tag}}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./${{ inputs.component_path }}
          file: ./${{ inputs.component }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/${{ inputs.component }}-world:${{ steps.version.outputs.tag }}
            konstellation/${{ inputs.component }}-world:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

