name: Helm release workflow 

on:
  workflow_call:
    inputs:
      chart_file:
        required: true
        type: string
    secrets:
      pat:
        required: true

jobs:
  create-rc-tag:
    # Just after a workflow completes successfully and the workflows was triggered in main branch
    if: |
      always() || 
      (github.event.workflow_run.head_branch == 'main' &&
      github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.rc_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.pat }}

      - name: Generate a pre-release
        id: rc_tag
        uses: intelygenz/monorepo-tagger-action@v1.2.1
        with:
          current-major: 0
          mode: 'product'
          type: 'pre-release'
          release-branch-prefix: "release/v"
          pre-release-name: 'rc'
          update-versions-in: '[{"file": "${{ inputs.chart_file }}", "property": "version"}]'
        env:
          GITHUB_TOKEN: ${{ secrets.pat }}

  create-fix-tag:
    # Just after a workflow completes successfully and the workflows was triggered in a release branch
    if: |
      always() || 
      (startsWith(github.event.workflow_run.head_branch, 'release') &&
      github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.fix_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.pat }}

      - name: Generate a fix tag
        id: fix_tag
        uses: intelygenz/monorepo-tagger-action@v1.2.1
        with:
          mode: 'product'
          type: 'fix'
          release-branch-prefix: "release/v"
          update-versions-in: '[{"file": "${{ inputs.chart_file }}", "property": "version"}]'
        env:
          GITHUB_TOKEN: ${{ secrets.pat }}
