name: Helm release workflow 

on:
  workflow_call:
    inputs:
      chart_file:
        required: true
        type: string
      chart_url:
        required: true
        type: string
      chart_path:
        required: true
        type: string
    secrets:
      pat:
        required: true

jobs:
  create-rc-tag:
    # Just after a workflow completes successfully and the workflows was triggered in main branch
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.rc_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.pat }}

      - name: Generate a pre-release
        id: rc_tag
        uses: intelygenz/monorepo-tagger-action@v1.3.0
        with:
          current-major: 1
          mode: 'product'
          type: 'pre-release'
          release-branch-prefix: "release/v"
          pre-release-name: 'rc'
          update-versions-in: '[{"file": "${{ inputs.chart_file }}", "property": "version"}]'
        env:
          GITHUB_TOKEN: ${{ secrets.pat }}

  create-fix-tag:
    # Just after a workflow completes successfully and the workflows was triggered in a release branch
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      startsWith(github.event.workflow_run.head_branch, 'release')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.fix_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.pat }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Generate a fix tag
        id: fix_tag
        uses: intelygenz/monorepo-tagger-action@v1.3.0
        with:
          mode: 'product'
          type: 'fix'
          release-branch-prefix: "release/v"
          update-versions-in: '[{"file": "${{ inputs.chart_file }}", "property": "version"}]'
        env:
          GITHUB_TOKEN: ${{ secrets.pat }}

      - uses: azure/setup-helm@v1

      - uses: chrisdickinson/setup-yq@latest

      - name: Add repos
        run: |
          for i in $(yq r ct.yaml 'chart-repos'| sed -e 's/^- //')
          do
            NAME=$(echo $i | awk -F"=" '{print $1}')
            REPO=$(echo $i | awk -F"=" '{print $2}')
            helm repo add $NAME $REPO
          done

      - name: Chart releaser
        run: |
          # Download chart releaser
          # This is a workaround needed because chart-releaser doesn't work with tags: https://github.com/helm/chart-releaser-action/issues/60
          curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/v1.2.1/chart-releaser_1.2.1_linux_amd64.tar.gz"
          tar -xzf cr.tar.gz
          rm -f cr.tar.gz
          repo=$(cut -d '/' -f 2 <<< "$GITHUB_REPOSITORY")
          owner=$(cut -d '/' -f 1 <<< "$GITHUB_REPOSITORY")
          echo "Creating release..."
          # package chart
          ./cr package ${{ inputs.chart_path }}/$repo
          # upload chart to github releases
          ./cr upload \
              --owner "$owner" \
              --git-repo "$repo" \
              --token "${{ secrets.GITHUB_TOKEN }}" \
              --commit "$(git rev-parse HEAD)" \
              --skip-existing
          # Update index and push to github pages
          ./cr index \
              --owner "$owner" \
              --git-repo "$repo" \
              --token "${{ secrets.GITHUB_TOKEN }}" \
              --charts-repo ${{ inputs.chart_url }} \
              --index-path index.yaml \
              --push
